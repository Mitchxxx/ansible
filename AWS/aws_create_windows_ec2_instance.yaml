---
- hosts: localhost
  gather_facts: false
  connection: local

  tasks:
    - pause:
        prompt: "Enter Password"
        echo: no
      when: Password is undefined
      register: password_input

    - set_fact:
        password: "{{ password_input.user_input }}"
      when: password is undefined

    - ec2_vpc_net_info:
        region: eu-west-1
        filters:
          "tag:Name": ansible
      register: ansible_vpc

    - ec2_vpc_subnet_info:
        region: eu-west-1
        filters:
          vpc-id: "{{ ansible_vpc.vpcs[0].id }}"
      register: ansible_subnet

    - name: webserver security group
      ec2_group:
        name: windows
        description: windows sg
        vpc_id: "{{ ansible_vpc.vpcs[0].id }}"
        region: eu-west-1
        tags:
          Name: windows
          app: ansible
          env: dev
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on port 80
          - proto: tcp
            from_port: 3389
            to_port: 3389
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on port 3389
          - proto: tcp
            from_port: 5986
            to_port: 5986
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on port 5986
          - proto: tcp
            from_port: 5985
            to_port: 5985
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on port 5985
      register: ansible_windows_sg

    - name: create a new ec2 key
      ec2_key:
        name: aws-ansible-key
        region: eu-west-1
        state: present
      register: ec2_key

    - debug:
        var: ec2_key

    - name: Save private key to disk
      copy:
        content: "{{ ec2_key.key.private_key | default('') }}"
        dest: "./aws-ansible-key.pem"
        mode: '0600'
      when: ec2_key.key.private_key is defined and not lookup('file', './aws-ansible-key.pem')

#    - name: Gather facts about existing EC2 Instances
#      ec2_instance_info:
#        region: eu-west-1
#        filters:
#          "tag:Name": "winweb01"
#          "tag:app": "ansible"
#          "tag:env": "dev"
#          "tag:os": "windows"
#      register: existing_instances

    - name: windows - create ec2 instance
      ec2_instance:
        key_name: aws-ansible-key
        instance_type: t2.micro
        image_id: ami-0dacdf49ee33024f0
        region: eu-west-1
        count: 1
        vpc_subnet_id: "{{ ansible_subnet.subnets[0].id }}"
        user_data: |
          <powershell>
          $content = (Invoke-WebRequest -Uri 'https://github.com/ansible/ansible-documentation/blob/devel/examples/scripts/ConfigureRemotingForAnsible.ps1' -UseBasicParsing).content
          iex $content
          $password = "{{ password }}" | ConvertTo-SecureString -AsPlainText -Force
          New-LocalUser 'ansible' -Password $password
          Add-LocalGroupMember -Group 'Administrators' -Member 'ansible'
          </powershell>
          <persist>true</persist>
        wait: yes
        network:
          assign_public_ip: yes
        security_group: "{{ ansible_windows_sg.group_id }}"
        tags:
          Name: winweb01
          app: ansible
          env: dev
          os: windows
      register: ec2


    - name: Pause before associating an Elastic Ip
      pause:
        seconds: 300

    - name: associate new elastic Ips with each of the instance
      ec2_eip:
        device_id: "{{ item }}"
        release_on_disassociation: yes
        region: eu-west-1
      loop: "{{ ec2.instance_ids }}"

